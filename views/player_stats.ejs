<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" type="text/css" href="/stats.css">
	<link rel="stylesheet" type="text/css" href="/nav_bar.css">
	<link rel="stylesheet" type="text/css" href="/default_style.css">
	<link rel="stylesheet" type="text/css" href="/player_stats.css">
	<link rel="stylesheet" type="text/css" href="/bootstrap-table-style.css">
	<!-- <meta name="viewport" content="width=device-width, initial-scale=1.0"> -->
	<script
  		src="https://code.jquery.com/jquery-3.6.1.min.js"
  		integrity="sha256-o88AwQnZB+VDvE9tvIXrMQaPlFFSUTR+nldQm1LuPXQ="
  		crossorigin="anonymous"></script>
  	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  	<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4083353808185208"
     crossorigin="anonymous"></script>
	<title><%= player.name %>&nbsp;Stats</title>
</head>
<body>
	<div id="nav-bar">
		<div id= "top-left">
			<div id="logo-container"><a href="/"><img src='/basketball.jpeg' id='logo' width=100% height=auto></a></div>
			<span id="users-tab"><a href="/users">Users</a></span>
			<span id="stats-tab"><a href="/stats">Stats</a></span>
			<span id="charts-tab"><a href="/charts">Charts</a></span>
		</div>
		<div id="middle"></div>
		<div id= "top-right">
			<% if (user) { %>
			<span id= "logout"><a href="/logout">Logout</a></span>
			<span id= "logged-in-username"><a href=<%= "/users/" + user.id %>><%= user.username %></a></span>
			<% } else { %>
			<span id= "sign-in"><a href="/login">Login</a></span>
			<% } %>
			<span id='create-take'><a href="/users/createtake">Create Take</a></span>
			
			<div class="user-search-cards">
				<div class="search-wrapper">
					<i class="fa fa-search"></i>
					<input type="search" id="search" placeholder="Search Users" data-search>
				</div>
				<div class="user-cards" id="user-cards-div" data-user-cards-container>
					<template data-user-template>
						<a>
						<div class="card" data-card>
							<div class="username" data-username></div>
						</div>
						</a>
					</template>
				</div>
			</div>
		</div>
	</div>

	<% function getOnOff(player, team) {
		const GAME_LENGTH = 48;
		//console.log(player.name);
		let total_off_court = team.total_point_differential-player.total_plus_minus;
		let total_mins_off = (team.games_played*GAME_LENGTH+team.total_ots*5)-player.total_mins;
		//console.log("off court: " + total_off_court);
		//console.log("mins off: " + total_mins_off);

		let per48_off = total_off_court*(GAME_LENGTH/total_mins_off);
		let per48_on = player.total_plus_minus*(GAME_LENGTH/player.total_mins);

		//console.log("per48_off: " + per48_off);
		//console.log("per48_on: " + per48_on);
		return (per48_on-per48_off);

	} %>

	<% function getWinIncrease(player, team) {
		if (team.games_played == player.games_played) {
			return "N/A";
		}
		let total_wins_without = team.total_wins-player.total_wins;
		let win_pct_without = total_wins_without/(team.games_played-player.games_played);

		let win_pct_with = player.total_wins/player.games_played;

		return win_pct_with-win_pct_without;
	} %>

	<% function getNetOff(player, team) {
		const GAME_LENGTH = 48;
		let total_off_court = team.total_point_differential-player.total_plus_minus;
		//console.log(total_off_court);
		let total_mins_off = (team.games_played*GAME_LENGTH+team.total_ots*5)-player.total_mins;

		let per48_off = total_off_court*(GAME_LENGTH/total_mins_off);
		//console.log(per48_off);
		if (per48_off > 0) {
			return [("+"+per48_off.toFixed(1)), "positive"];
		}
		else if (per48_off == 0) {
			return [per48_off.toFixed(1), "grey"];
		}
		else {
			return [per48_off.toFixed(1), "negative"];
		}
	} %>

	<% function getNetOn(player, team) {
		const GAME_LENGTH = 48;
		let per48_on = player.total_plus_minus*(GAME_LENGTH/player.total_mins);
		if (per48_on > 0) {
			return [("+"+per48_on.toFixed(1)), "positive"];
		}
		else if (per48_on == 0) {
			return [per48_on.toFixed(1), "grey"];
		}
		else {
			return [per48_on.toFixed(1), "negative"];
		}
	} %>

	<% function getClassName(value) {
		if (value > 0) {
			return "positive";
		}
		else if (value == 0) {
			return "grey";
		}
		else {
			return "negative";
		}
	} %>

	<div id="name"><%= player.name %></div>
	<div id="team"><a href=<%= "/stats/teams/"+player.team.split(" ").join("").toLowerCase() %>><%= player.team %></a></div>

	<div id="searches">

		<div id="player-search-div">
			<input name="player-search" id="player-search" player-data-search required placeholder="Search for another player">
		</div>

		<div id="player-block">
			<div class="player-cards hide" id="player-cards-div" data-player-container>
				<template data-player-template>
					<div class="player-card" player-data-card>
						<div class="player" data-player></div>
					</div>
				</template>
			</div>
		</div>

		<div id="team-search-div">
			<input name="team-search" id="team-search" team-data-search required placeholder="Search for a team">
		</div>

		<div id="team-block">
			<div class="team-cards hide" id="team-cards-div" data-team-container>
				<template data-team-template>
					<div class="team-card" team-data-card>
						<div class="team" data-team></div>
					</div>
				</template>
			</div>
		</div>

	</div>


	<div id="top-line">
		<div id="stats">
			<div id="ppg-div"><span id="ppg"><%= (player.total_points/player.games_played).toFixed(1) %></span>&nbsp;ppg</div>
			<div id="apg-div"><span id="apg"><%= (player.total_assists/player.games_played).toFixed(1) %></span>&nbsp;apg</div>
			<div id="rpg-div"><span id="rpg"><%= (player.total_rebounds/player.games_played).toFixed(1) %></span>&nbsp;rpg</div>
			<div id="ts-div"><span id="ts"><%= ((player.total_fgm+.5*player.total_3sM+.5*player.total_ftm)/(player.total_fga+.44*player.total_fta)*100).toFixed(1) %></span>&nbsp;ts%</div>
		</div>


		<div id="pcts-div">
			<div id="fgpct-div"><span id="fgpct"><%= (player.total_fgm/player.total_fga*100).toFixed(1) %></span>&nbsp;fg%</div>
			<div id="tpct-div"><span id="tpct"><%= (player.total_3sM/player.total_3sA*100).toFixed(1) %></span>&nbsp;3p%</div>
			<div id="ftpct-div"><span id="ftpct"><%= (player.total_ftm/player.total_fta*100).toFixed(1) %></span>&nbsp;ft%</div>
			<div id="efg-div"><span id="efg"><%= ((player.total_fgm+.5*player.total_3sM)/(player.total_fga)*100).toFixed(1) %></span>&nbsp;efg%</div>
		</div>
	</div>

	<div id="takes">
		<div id="individual-odds"></div>
		<!--<div id="team-odds"></div>-->
		<div id="individual-odds-2"></div>
	</div>

	<% var class_name %>
	<% var on_off_post %>
	<% var on_off_pre = "The " + player.team + " are "; %>
	<% let on_off = getOnOff(player, team).toFixed(1) %>
	<% if (on_off>0) { 
			class_name = "positive";
			//on_off = "+"+on_off;
			on_off_post = " points better per 48 minutes with " + player.name + " on the court.";
		}
		else if (on_off==0) {
			class_name = "grey";
			on_off_post = " points better per 48 minutes with " + player.name + " on the court.";
		}
		else {
			class_name = "negative";
			on_off *= -1; //
			on_off = on_off.toFixed(1);
			on_off_post = " points worse per 48 minutes with " + player.name + " on the court.";
		}
	%>

	<div id="impact">
		<div id="all-net">
			<div id="net-div"><%= on_off_pre %>&nbsp;<span id="on-off-net" class=<%= class_name %>><%= on_off %></span>&nbsp;<%= on_off_post %></div>
			<% let net_off = getNetOff(player, team) %>
			<% let net_on = getNetOn(player, team) %>
			<div id="net-explan-div">

				<div id="net-on-div"><%= "with ("+player.total_mins.toFixed(0)+" mins):" %><br><span id="net-on" class=<%= net_on[1] %>><%= net_on[0] %></span></div>

				<div id="net-off-div"><%= "without ("+((team.games_played*48+team.total_ots*5)-player.total_mins).toFixed(0)+" mins):" %><br><span id="net-off" class=<%= net_off[1] %>><%= net_off[0] %></span></div>

				<div id="swing-div"><%= "swing:" %><br><span id="swing" class=<%= class_name %>><%= class_name=="positive" ? ("+"+on_off):(class_name=="negative" ? ("-"+on_off):on_off) %></span></div>

			</div>
		</div>
		<% let win_increase = getWinIncrease(player, team) %>
		<% if (win_increase != "N/A") { %>
		<div id="all-wins">
			<% if (win_increase > 0) { %>
				<div id="win-pct-div"><%= "The "+player.team+" win" %>&nbsp;<span id="win-diff" class="positive"><%= (win_increase*100).toFixed(1)+"%" %></span>&nbsp;<%= "more of their games with "+player.name+" on the court." %></div>
			<% } else if (win_increase == 0) { %>
				<div id="win-pct-div"><%= "The "+player.team+" win" %>&nbsp;<span id="win-diff" class="grey"><%= (win_increase*100).toFixed(1)+"%" %></span>&nbsp;<%= "more of their games with "+player.name+" on the court." %></div>
			<% } else { %>
				<div id="win-pct-div"><%= "The "+player.team+" win" %>&nbsp;<span id="win-diff" class="negative"><%= (win_increase*-100).toFixed(1)+"%" %></span>&nbsp;<%= "less of their games with "+player.name+" on the court." %></div>
			<% } %>

			<div id="wins-explan-div">

				<div id="wins-on-div"><%= "with:" %><br><%= player.total_wins %>-<%= player.games_played-player.total_wins %>&nbsp;<span id="wins-on" class=<%= getClassName(player.total_wins-.5*player.games_played) %>><%= (player.total_wins/player.games_played*100).toFixed(1)+"%" %></span></div>

				<div id="wins-off-div"><%= "without:" %><br><%= team.total_wins-player.total_wins %>-<%= (team.games_played-player.games_played)-(team.total_wins-player.total_wins) %>&nbsp;<span id="wins-off" class=<%= getClassName((team.total_wins-player.total_wins)-.5*(team.games_played-player.games_played)) %>><%= ((team.total_wins-player.total_wins)/(team.games_played-player.games_played)*100).toFixed(1)+"%" %></span></div>

				<div id="diff-div"><%= "difference:" %><br><span id="diff" class=<%= getClassName(win_increase) %>><%= win_increase>0 ? ("+"+(win_increase*100).toFixed(1)+"%"):(win_increase*100).toFixed(1)+"%" %></span></div>

			</div>
		</div>

		<% } %>
	</div>

	<!--<hr>-->

	<div id="overall-stats">
		<table id="overall-stats-table">
			<thead>
				<th></th>
				<th>GP</th>
				<th>Mins</th>
				<th>Pts</th>
				<th>Asts</th>
				<th>Reb</th>
				<th>FGM</th>
				<th>FGA</th>
				<th>FG%</th>
				<th>3PM</th>
				<th>3PA</th>
				<th>3P%</th>
				<th>FTM</th>
				<th>FTA</th>
				<th>FT%</th>
				<th>TO</th>
				<th>+/-</th>
				<th>Win%</th>
				<th>Techs</th>
			</thead>
			<tbody>
				<tr id="first-row">
					<td>Avg</td>
					<td>1</td>
					<td><%= (player.total_mins/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_points/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_assists/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_rebounds/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_fgm/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_fga/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_fgm/player.total_fga*100).toFixed(1) %></td>
					<td><%= (player.total_3sM/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_3sA/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_3sM/player.total_3sA*100).toFixed(1) %></td>
					<td><%= (player.total_ftm/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_fta/player.games_played).toFixed(1) %></td>
					<td><%= (player.total_ftm/player.total_fta*100).toFixed(1) %></td>
					<td><%= (player.total_TOs/player.games_played).toFixed(1) %></td>
					<td class=<%= getClassName(player.total_plus_minus) %>><%= (player.total_plus_minus/player.games_played).toFixed(1) %></td>
					<% let win_pct = player.total_wins/player.games_played %>
					<td class=<%= getClassName(player.total_wins/player.games_played-.5) %>><%= (win_pct != 1) ? (win_pct).toFixed(3).slice(1):win_pct.toFixed(3) %></td>
					<td><%= (player.total_techs/player.games_played).toFixed(1) %></td>
				</tr>
				<tr>
					<td>Totals</td>
					<td><%= player.games_played %></td>
					<td><%= (player.total_mins).toFixed(1) %></td>
					<td><%= player.total_points %></td>
					<td><%= player.total_assists %></td>
					<td><%= player.total_rebounds %></td>
					<td><%= player.total_fgm %></td>
					<td><%= player.total_fga %></td>
					<td><%= (player.total_fgm/player.total_fga*100).toFixed(1) %></td>
					<td><%= player.total_3sM %></td>
					<td><%= player.total_3sA %></td>
					<td><%= (player.total_3sM/player.total_3sA*100).toFixed(1) %></td>
					<td><%= player.total_ftm %></td>
					<td><%= player.total_fta %></td>
					<td><%= (player.total_ftm/player.total_fta*100).toFixed(1) %></td>
					<td><%= player.total_TOs %></td>
					<td class=<%= getClassName(player.total_plus_minus) %>><%= player.total_plus_minus %></td>
					<% let wins = player.total_wins %>
					<% let losses = player.games_played-player.total_wins %>
					<td class=<%= getClassName(player.total_wins/player.games_played-.5) %>><%= wins %>-<%= losses %></td>
					<td><%= player.total_techs %></td>
				</tr>
			</tbody>
		</table>				
	</div>

	<div id="basic-charts">
		<div id="statProgressionChart" style="width: 48%; height: 450px"></div>
		<div id="statBarChart" style="width: 48%; height: 450px"></div>
	</div>

	<div id="game-logs">
		<table id="game-logs-table">
			<thead>
				<th>#</th>
				<th>Date</th>
				<th>Game</th>
				<th>Score</th>
				<th>Result</th>
				<th>Mins</th>
				<th>Pts</th>
				<th>Asts</th>
				<th>Reb</th>
				<th>FGM</th>
				<th>FGA</th>
				<th>FG%</th>
				<th>3PM</th>
				<th>3PA</th>
				<th>3P%</th>
				<th>FTM</th>
				<th>FTA</th>
				<th>FT%</th>
				<th>TS%</th>
				<th>EFG%</th>
				<th>TO</th>
				<th>+/-</th>
				<th>On/Off</th>
				<th>Techs</th>
			</thead>
			<tbody id="gl-data">
				
			</tbody>
		</table>
	</div>


	<script type="text/javascript" src="/search_bar.js"></script>
	<script type="text/javascript" src="/datatables.min.js"></script>

	<script type="text/javascript">
		const team_colors = {'Heat': '#98002e', 'Lakers': '#552583', 'Celtics': '#007a33', 'Clippers': '#c8102e', 'Nets': '#777D84', 'Hornets': '#00788c', 'Bulls': '#ce1141', 'Hawks': '#e03a3e', 'Suns': '#e56020', 'Mavericks': '#00538c', 'Nuggets': '#1d428a', 'Pistons': '#c8102e', 'Warriors': '#ffc72c', 'Rockets': '#ce1141', 'Pacers': '#002d62', 'Grizzlies': '#5d76a9', 'Bucks': '#00471b', 'Timberwolves': '#236192', 'Pelicans': '#0c2340', 'Knicks': '#f58426', 'Thunder': '#007ac1', 'Magic': '#0077c0', '76ers': '#006bb6', 'Trail Blazers': '#e03a3e', 'Kings': '#5a2d81', 'Spurs': '#c4ced4', 'Raptors': '#ce1141', 'Jazz': '#002b5c', 'Cavaliers': '#860038', 'Wizards': '#002b5c'};
		const line_team_colors = {'Heat': 'red', 'Lakers': '#b707f7', 'Celtics': '#007a33', 'Clippers': 'red', 'Nets': 'silver', 'Hornets': '#00788c', 'Bulls': '#ce1141', 'Hawks': '#e03a3e', 'Suns': '#e56020', 'Mavericks': '#00538c', 'Nuggets': '#1d428a', 'Pistons': '#c8102e', 'Warriors': '#ffc72c', 'Rockets': '#ce1141', 'Pacers': '#002d62', 'Grizzlies': '#5d76a9', 'Bucks': '#00471b', 'Timberwolves': '#236192', 'Pelicans': 'red', 'Knicks': '#f58426', 'Thunder': '#007ac1', 'Magic': '#0077c0', '76ers': '#247fff', 'Trail Blazers': '#e03a3e', 'Kings': '#5a2d81', 'Spurs': '#c4ced4', 'Raptors': '#ce1141', 'Jazz': '#002b5c', 'Cavaliers': '#860038', 'Wizards': '#002b5c'};
	</script>
	<script type="text/javascript">

		function convertDate(date) {
			return date.getFullYear()+'-'+(date.getMonth()+1)+'-'+date.getDate();
		}

		const homeAway = {"H": "vs", "A": "at"};

		var sum_games = 0;
		var sum_stat = 0;

		function accumulateAvg(game_stat) {
			sum_games++;
			sum_stat+=game_stat;
			return sum_stat/sum_games;
		}

		function getIndividualOnOff(player_game_log, team_game_log) {
			const GAME_LENGTH = 48;
			let per48_on = player_game_log.plus_minus*GAME_LENGTH/(player_game_log.mins+player_game_log.secs/60);
			//console.log(per48_on);
			let per48_off = (team_game_log.point_differential-player_game_log.plus_minus)*GAME_LENGTH/((GAME_LENGTH+team_game_log.ots*5)-(player_game_log.mins+player_game_log.secs/60));
			//console.log(per48_off);
			return per48_on-per48_off;
		}

		var player_id = "<%= player._id %>"
		var player_stats;
		var team_id = "<%= team._id %>"
		var team_stats;

		exe();

		async function exe() {
		try {
			var player = await fetch("/api/stats/players/gamelogs/"+player_id);
			player = await player.json();
     	//fetch("/api/stats/players/gamelogs/"+id)
		//.then(res => res.json())
		//.then(player => {
			player_stats = player;
			var data = player.game_logs.map(game_log => [game_log.game_date, accumulateAvg(game_log.points)]);
			data.unshift(['Date', 'Points']);
     	
     		
			google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_games = 0;
	    		sum_stat = 0;
	    		let data_arr = player.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), accumulateAvg(game_log.points)]);
	    		data_arr.unshift(['Date', 'Points']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'PPG over Time',
				vAxis: {minValue: 0, maxValue: 50},
				//height: 450,
				//width: 550
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.points]);
	    		data_arr.unshift(['Game', 'Points']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Points by Game',
	    			vAxis: {minValue: 0, maxValue: 50},
	    			//height: 450,
					//width: 550
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}

	    	var team = await fetch("/api/stats/teams/gamelogs/"+team_id);
	    	team = await team.json();
	    	team_stats = team;

	    	let player_game_logs = player_stats.game_logs;
			let team_game_logs = team_stats.game_logs;

			var temp = "";
			var j = 0;
			for (i = 0; i < team_game_logs.length; i++) {
				temp += "<tr>";
				temp += "<td>"+(i+1)+"</td>";
				let game_date_str = new Date(team_game_logs[i].game_date);
				game_date_str = game_date_str.getFullYear()+'-'+(game_date_str.getMonth()+1)+'-'+game_date_str.getDate();
				temp += "<td>"+game_date_str+"</td>";
				temp += "<td>"+homeAway[team_game_logs[i].location]+" "+"<a id='team-link' href="+'/stats/teams/'+team_game_logs[i].opponent.split(" ").join("").toLowerCase()+">"+team_game_logs[i].opponent+"</a>"+"</td>";
				let params = (team_game_logs[i].location == "H") ? ("<%= player.team.split(" ").join("").toLowerCase() %>"+"/"+team_game_logs[i].opponent.split(" ").join("").toLowerCase()+"/"+game_date_str):(team_game_logs[i].opponent.split(" ").join("").toLowerCase()+"/"+"<%= player.team.split(" ").join("").toLowerCase() %>"+"/"+game_date_str);
				temp += "<td>"+"<a id='box-link' href="+'/stats/boxscores/'+params+">"+team_game_logs[i].points+"-"+(team_game_logs[i].points-team_game_logs[i].point_differential)+"</a>"+"</td>";
				temp += "<td>"+(team_game_logs[i].win ? "W":"L")+"</td>";
				if (player_game_logs.length-1 >= j && team_game_logs[i].game_date == player_game_logs[j].game_date) {
					temp += "<td>"+player_game_logs[j].mins+":"+((player_game_logs[j].secs<10) ? ("0"+player_game_logs[j].secs):player_game_logs[j].secs)+"</td>";
					temp += "<td>"+player_game_logs[j].points+"</td>";
					temp += "<td>"+player_game_logs[j].assists+"</td>";
					temp += "<td>"+player_game_logs[j].rebounds+"</td>";
					temp += "<td>"+player_game_logs[j].fgm+"</td>";
					temp += "<td>"+player_game_logs[j].fga+"</td>";
					temp += "<td>"+(player_game_logs[j].fgm/player_game_logs[j].fga*100).toFixed(1)+"</td>";
					temp += "<td>"+player_game_logs[j].tpm+"</td>";
					temp += "<td>"+player_game_logs[j].tpa+"</td>";
					temp += "<td>"+(player_game_logs[j].tpm/player_game_logs[j].tpa*100).toFixed(1)+"</td>";
					temp += "<td>"+player_game_logs[j].ftm+"</td>";
					temp += "<td>"+player_game_logs[j].fta+"</td>";
					temp += "<td>"+(player_game_logs[j].ftm/player_game_logs[j].fta*100).toFixed(1)+"</td>";
					temp += "<td>"+((player_game_logs[j].fgm+.5*player_game_logs[j].tpm+.5*player_game_logs[j].ftm)/(player_game_logs[j].fga+.44*player_game_logs[j].fta)*100).toFixed(1)+"</td>";
					temp += "<td>"+((player_game_logs[j].fgm+.5*player_game_logs[j].tpm)/(player_game_logs[j].fga)*100).toFixed(1)+"</td>";
					temp += "<td>"+player_game_logs[j].TOs+"</td>";
					let pm_class = player_game_logs[j].plus_minus>0 ? "positive":(player_game_logs[j].plus_minus==0) ? "grey":"negative";
					let pm_str = player_game_logs[j].plus_minus>0 ? "+"+player_game_logs[j].plus_minus:player_game_logs[j].plus_minus;
					temp += "<td class="+pm_class+">"+pm_str+"</td>";
					let indOnOff = getIndividualOnOff(player_game_logs[j], team_game_logs[i]);
					let onOff_class = indOnOff>0 ? "positive":(indOnOff==0) ? "grey":"negative";
					indOnOff = indOnOff>0 ? "+"+indOnOff.toFixed(1):indOnOff.toFixed(1);
					temp += "<td class="+onOff_class+">"+indOnOff+"</td>";
					temp += "<td>"+player_game_logs[j].techs+"</td>";
					temp += "</tr>";
					j++;
				}
				else {
					temp += "<td>DNP</td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "<td></td>";
					temp += "</tr>";
				}
			}
			document.getElementById("gl-data").innerHTML = temp;

			$(document).ready(function () {
				$('#game-logs-table').DataTable({
					columnDefs: [
						{"orderSequence": ["desc", "asc"], "targets": [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]}
					],
					//order: [[4, 'desc']],
					pageLength: 100
				});
				$('.dataTables_length').addClass('bs-select');
			});


    	//});
		} catch(err) {
			console.log(err);
		}
		}

	</script>

	<script type="text/javascript">
		document.getElementById("ppg-div").addEventListener("click", pointGraphs);
    	function pointGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_games = 0;
	    		sum_stat = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), accumulateAvg(game_log.points)]);
	    		data_arr.unshift(['Date', 'Points']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'PPG over Time',
				vAxis: {minValue: 0, maxValue: 50},
				//explorer: {},
				//crosshair: {trigger: 'both', orientation: 'vertical'},
				//height: 450,
				//width: 600
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.points]);
	    		data_arr.unshift(['Game', 'Points']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Points by Game',
	    			vAxis: {minValue: 0, maxValue: 50},
	    			//height: 450,
					//width: 515
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script>
    	document.getElementById("apg-div").addEventListener("click", assistGraphs);
    	function assistGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_games = 0;
	    		sum_stat = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), accumulateAvg(game_log.assists)]);
	    		data_arr.unshift(['Date', 'Assists']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'APG over Time',
				vAxis: {minValue: 0, maxValue: 15}
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.assists]);
	    		data_arr.unshift(['Game', 'Assists']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Assists by Game',
	    			vAxis: {minValue: 0, maxValue: 15}
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}

	</script>

	<script type="text/javascript">
		document.getElementById("rpg-div").addEventListener("click", reboundGraphs);
    	function reboundGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_games = 0;
	    		sum_stat = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), accumulateAvg(game_log.rebounds)]);
	    		data_arr.unshift(['Date', 'Rebounds']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'RPG over Time',
				vAxis: {minValue: 0, maxValue: 20}
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.rebounds]);
	    		data_arr.unshift(['Game', 'Rebounds']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Rebounds by Game',
	    			vAxis: {minValue: 0, maxValue: 20}
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script type="text/javascript">
		var gen_info;
		fetch('/api/stats/all/generalinfo')
		.then(res => res.json())
		.then(info => {
			gen_info = info[0];
		});
	</script>

	<script type="text/javascript">
		var sum_made = 0;
		var sum_total = 0;
		function accumulatePct(made, total) {
			sum_made += made;
			sum_total += total;
			return sum_made/sum_total;
		}

		document.getElementById("fgpct-div").addEventListener("click", fgGraphs);
    	function fgGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_made = 0;
	    		sum_total = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), gen_info.fgpct, accumulatePct(game_log.fgm, game_log.fga)]);
	    		data_arr.unshift(['Date', 'League Avg', 'Field Goal Percentage']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'FG% over Time',
				vAxis: {minValue: .4, maxValue: .52, format: 'percent'},
				colors: ['#c3ceeb', 'blue']
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.fgm, game_log.fga-game_log.fgm]);
	    		data_arr.unshift(['Game', 'Field Goals Made', 'Field Goals Missed']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Field Goals by Game',
	    			vAxis: {minValue: 0, maxValue: 25},
	    			isStacked: true
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script type="text/javascript">
		document.getElementById("tpct-div").addEventListener("click", threeGraphs);
    	function threeGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_made = 0;
	    		sum_total = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), gen_info.tppct, accumulatePct(game_log.tpm, game_log.tpa)]);
	    		data_arr.unshift(['Date', 'League Avg', '3 Point Percentage']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: '3P% over Time',
				vAxis: {minValue: .3, maxValue: .4, format: 'percent'},
				colors: ['#c3ceeb', 'blue']
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.tpm, game_log.tpa-game_log.tpm]);
	    		data_arr.unshift(['Game', "3's Made", "3's Missed"]);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: "3's by Game",
	    			vAxis: {minValue: 0, maxValue: 15},
	    			isStacked: true
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script type="text/javascript">
		document.getElementById("ftpct-div").addEventListener("click", ftGraphs);
    	function ftGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_made = 0;
	    		sum_total = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), gen_info.ftpct, accumulatePct(game_log.ftm, game_log.fta)]);
	    		data_arr.unshift(['Date', 'League Avg', 'Free Throw Percentage']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'FT% over Time',
				vAxis: {minValue: .7, maxValue: .9, format: 'percent'},
				colors: ['#c3ceeb', 'blue']
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.ftm, game_log.fta-game_log.ftm]);
	    		data_arr.unshift(['Game', 'Free Throws Made', 'Free Throws Missed']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Free Throws by Game',
	    			vAxis: {minValue: 0, maxValue: 15},
	    			isStacked: true
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script type="text/javascript">
		/*
		var id = "<%= team._id %>"
		var team_stats;
		
     	fetch("/api/stats/teams/gamelogs/"+id)
		.then(res => res.json())
		.then(team => {
			team_stats = team;
		});*/

		var pos = 0;
		var color;
		function getOffCourt(player_game_log, team) {
			while (team.game_logs[pos].game_date != player_game_log.game_date) {
				pos++;
			}
			team.game_logs[pos].point_differential-player_game_log.plus_minus>0 ? color='#44D62C':color='red';
			return team.game_logs[pos].point_differential-player_game_log.plus_minus;
		}


		var sum_off_court = 0;
		var sum_mins_off = 0;
		var sum_on_court = 0;
		var sum_mins_on = 0;


		function accumulateOnOff(player, team_game_log) {
			const GAME_LENGTH = 48;
			if (player.game_logs.length <= pos || team_game_log.game_date != player.game_logs[pos].game_date) {
				sum_off_court += team_game_log.point_differential;
				sum_mins_off += GAME_LENGTH+team_game_log.ots*5;
			}
			else {
				let player_game_log = player.game_logs[pos];
				sum_off_court += team_game_log.point_differential-player_game_log.plus_minus;
				sum_mins_off += (GAME_LENGTH+team_game_log.ots*5)-(player_game_log.mins+player_game_log.secs/60);

				sum_on_court += player_game_log.plus_minus;
				sum_mins_on += player_game_log.mins+player_game_log.secs/60;

				pos++;
			}
			let per48_off = sum_off_court*(GAME_LENGTH/sum_mins_off);
			let per48_on = sum_on_court*(GAME_LENGTH/sum_mins_on);


			return Math.round((per48_on-per48_off)*10)/10;

		}

		document.getElementById("net-div").addEventListener("click", onOffGraphs);
    	function onOffGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_off_court = 0;
				sum_mins_off = 0;
				sum_on_court = 0;
				sum_mins_on = 0;
				pos = 0;
	    		//let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), accumulateOnOff(game_log, team_stats)]);
	    		let data_arr = team_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), accumulateOnOff(player_stats, game_log)]);
	    		data_arr.unshift(['Date', 'On/Off per 48']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'On/Off per 48 over Time',
				colors: [line_team_colors['<%= player.team %>']],
				//vAxis: {minValue: 0, maxValue: 1, format: 'percent'},
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		pos = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.plus_minus, game_log.plus_minus>0 ? 'stroke-color:black;stroke-width:2;color:#44D62C':'stroke-color:black;stroke-width:2;color:red', getOffCourt(game_log, team_stats), 'stroke-color:black;stroke-width:2;color:'+color]);
	    		data_arr.unshift(['Game', 'On Court', {role:'style'}, 'Off Court', {role:'style'}]);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: "<%= player.team+" with "+player.name+ " On/Off Court by Game " %>",
	    			vAxis: {minValue: 0, maxValue: 30},
	    			width: player_stats.game_logs.length>10 ? (player_stats.game_logs.length/10*600):600,
	    			chartArea: {left: 100}
	    			/*height: 450*/
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script type="text/javascript">
		document.getElementById("ts-div").addEventListener("click", tsGraphs);
    	function tsGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_made = 0;
	    		sum_total = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), gen_info.tspct, accumulatePct(game_log.fgm+.5*game_log.tpm+.5*game_log.ftm, game_log.fga+.44*game_log.fta)]);
	    		data_arr.unshift(['Date', 'League Avg', 'True Shooting Percentage']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'TS% over Time',
				vAxis: {minValue: .5, maxValue: .65, format: 'percent'},
				colors: ['#c3ceeb', 'blue']
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.points, (game_log.fgm+.5*game_log.tpm+.5*game_log.ftm)/(game_log.fga+.44*game_log.fta)]);
	    		data_arr.unshift(['Game', 'Points', 'TS']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Points and True Shooting Percentage by Game',
	    			//vAxis: {minValue: 0, maxValue: 15},
	    			series: {
	    				0: {tagetAxisIndex: 0},
	    				1: {targetAxisIndex: 1}
	    			},
	    			vAxes: {
	    				0: {title: 'Points', minValue: 0, maxValue: 50},
	    				1: {title: 'TS%', minValue: 0, maxValue: 1, format: 'percent'}
	    			}
	    			//isStacked: true
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script type="text/javascript">
		document.getElementById("efg-div").addEventListener("click", efgGraphs);
    	function efgGraphs() {
    		google.charts.load('current', {'packages':['corechart']});
	    	google.charts.setOnLoadCallback(drawChart);

	    	function drawChart() {
	    		sum_made = 0;
	    		sum_total = 0;
	    		let data_arr = player_stats.game_logs.map(game_log => [convertDate(new Date(game_log.game_date)), gen_info.efg, accumulatePct(game_log.fgm+.5*game_log.tpm, game_log.fga)]);
	    		data_arr.unshift(['Date', 'League Avg', 'Effective Field Goal Percentage']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
				let options = {
				title: 'EFG% over Time',
				vAxis: {minValue: .5, maxValue: .65, format: 'percent'},
				colors: ['#c3ceeb', 'blue']
				};

	        	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

	        	chart.draw(data, options);
	        	
	    	}

	    	google.charts.load("current", {packages:['corechart']});
	    	google.charts.setOnLoadCallback(drawBarChart);

	    	function drawBarChart() {
	    		let data_arr = player_stats.game_logs.map(game_log => [homeAway[game_log.location]+" "+game_log.opponent, game_log.points-game_log.ftm, (game_log.fgm+.5*game_log.tpm)/(game_log.fga)]);
	    		data_arr.unshift(['Game', 'Points', 'EFG%']);
	    		let data = google.visualization.arrayToDataTable(data_arr);
	    		let options = {
	    			title: 'Points minus Free Throws and Effective Field Goal Percentage by Game',
	    			//vAxis: {minValue: 0, maxValue: 15},
	    			series: {
	    				0: {tagetAxisIndex: 0},
	    				1: {targetAxisIndex: 1}
	    			},
	    			vAxes: {
	    				0: {title: 'Points', minValue: 0, maxValue: 50},
	    				1: {title: 'EFG%', minValue: 0, maxValue: 1, format: 'percent'}
	    			}
	    			//isStacked: true
	    		};

	    		var chart = new google.visualization.ColumnChart(document.getElementById("statBarChart"));
	    		chart.draw(data, options);
	    	}
    	}
	</script>

	<script>
    	$(function() {
			var headers = $('table#game-logs-table thead tr');
				 

			headers.children().click(function() {

				headers.children().removeClass('highlight');
			 
				var index = $(this).prevAll().length;  
				headers.find(':nth-child(' + (index + 1) + ')').addClass('highlight');
			

			});
		});
    </script>

    <!--<div class="player-cards" id="player-cards-div" data-player-container>
		<template data-player-template>
			<div class="card" data-card>
				<div class="player" data-player></div>
			</div>
		</template>
	</div>-->
	<script type="text/javascript">
		const playerCardTemplate = document.querySelector("[data-player-template]");
		const playerCardContainer = document.querySelector("[data-player-container]");
		const playerSearchInput = document.querySelector("[player-data-search]");
		const playerCard = document.querySelector("[player-data-card]");

		let players = [];

		fetch("/api/stats/players/names")
		.then(res => res.json())
		.then(data => {
			players = data.map(player_info => {
				const card = playerCardTemplate.content.cloneNode(true).children[0];
				const player = card.querySelector("[data-player]");
				player.textContent = player_info.name;
				player.id = player_info._id;
				playerCardContainer.append(card);
				return { name: player_info.name, element: card };
			})
		})

		playerSearchInput.addEventListener("input", e => {
			const value = e.target.value;
			players.forEach(player => {
				const isVisible = (player.name.toLowerCase()).includes(value.toLowerCase());
				player.element.classList.toggle("hide", !isVisible);
			})
		})

		$(document).on('mousedown', '#player-cards-div div div', function(e) {
			e.preventDefault();
			window.location.href = "/stats/players/"+e.target.id;
		})

		document.getElementById("player-search").addEventListener("focus", showPlayers);

		function showPlayers() {
			if (document.getElementById("player-cards-div").style.display != "block") {
				document.getElementById("player-cards-div").style.display = "block";
			}
		}

		document.getElementById("player-search").addEventListener("blur", hidePlayers);

		function hidePlayers() {
			if (document.getElementById("player-cards-div").style.display != "none") {
				document.getElementById("player-cards-div").style.display = "none";
			}
		}
	</script>

	<script type="text/javascript">
		const teamCardTemplate = document.querySelector("[data-team-template]");
		const teamCardContainer = document.querySelector("[data-team-container]");
		const teamSearchInput = document.querySelector("[team-data-search]");
		const teamCard = document.querySelector("[team-data-card]");

		let teams = [];

		fetch("/api/stats/teams/names")
		.then(res => res.json())
		.then(data => {
			teams = data.map(team_info => {
				const card = teamCardTemplate.content.cloneNode(true).children[0];
				const team = card.querySelector("[data-team]");
				team.textContent = team_info.name;
				team.id = team_info.name.split(" ").join("").toLowerCase();
				teamCardContainer.append(card);
				return { name: team_info.name, element: card };
			})
		})

		teamSearchInput.addEventListener("input", e => {
			const value = e.target.value;
			teams.forEach(team => {
				const isVisible = (team.name.toLowerCase()).includes(value.toLowerCase());
				team.element.classList.toggle("hide", !isVisible);
			})
		})

		$(document).on('mousedown', '#team-cards-div div div', function(e) {
			e.preventDefault();
			window.location.href = "/stats/teams/"+e.target.id;
		})

		document.getElementById("team-search").addEventListener("focus", showTeams);

		function showTeams() {
			if (document.getElementById("team-cards-div").style.display != "block") {
				document.getElementById("team-cards-div").style.display = "block";
			}
		}

		document.getElementById("team-search").addEventListener("blur", hideTeams);

		function hideTeams() {
			if (document.getElementById("team-cards-div").style.display != "none") {
				document.getElementById("team-cards-div").style.display = "none";
			}
		}
	</script>

	<script type="text/javascript">
		let name = '<%= player.name %>'
		if (name == "Jabari Smith Jr.") {name = "Jabari Smith";}
		name = name.split(".").join("");
		name = name.split("&#39;").join("3");
		if (name == "De3Aaron Fox") {name = "Deaaron Fox";}
		else if (name == "De3Andre Hunter") {name = "Deandre Hunter";}
		else if (name == "D 3Angelo Russell") {name = "D3Angelo Russell";}
		let names = name.split(" ").map(player => (player.search("-") == -1) ? player[0]+player.slice(1).toLowerCase():player);
		if (name == "De3Anthony Melton") {
			name = "Melton,2De2Anthony";
		}
		else if (name == "OG Anunoby") {
			name = "Anunoby,2OG";
		}
		else if (name == "Ja Morant") {
			name = "Morant,2JA";
		}
		else if (names.length == 2) {
			name = names[1]+","+"2"+names[0];
		}
		else {
			name = names[1]+"2"+names[2]+","+"2"+names[0];
		}
		console.log(name);
		var takes = {};
		fetch('/api/odds/historical/player/'+name)
		.then(res => res.json())
		.then(odds => {
			var temp = "";
			var temp2 = "";
			for (i = 0; i < odds.length; i++) {
				let take_str = odds[i].take.split(" - ");
				take_str = take_str[take_str.length-1];
				takes[take_str] = odds[i].take;
				if (i % 2 == 0) {
					temp += "<div>"+take_str+" (as of "+convertDate(new Date(odds[i].current_odds.date))+"): "+"<span class='curr-odds' onclick='historicalGraphs(event)'>"+(odds[i].current_odds.pct*100).toFixed(1)+"%</span></div>";
				}
				else {
					temp2 += "<div>"+take_str+" (as of "+convertDate(new Date(odds[i].current_odds.date))+"): "+"<span class='curr-odds' onclick='historicalGraphs(event)'>"+(odds[i].current_odds.pct*100).toFixed(1)+"%</span></div>";
				}
			}
			document.getElementById("individual-odds").innerHTML = temp;
			document.getElementById("individual-odds-2").innerHTML = temp2;
		})

		function historicalGraphs(event) {
			let div_take = event.target.parentNode.innerText.split(" (as of")[0];
			let take = takes[div_take];
			take = take.split(" - ").join("@");
			take = take.split(" ").join("&");
			take = take.split("/").join("X");
			let participant = name;
			fetch('/api/odds/historical/history/player/'+take+'/'+participant)
			.then(res => res.json())
			.then(odds => {
				google.charts.load('current', {'packages':['corechart']});
				google.charts.setOnLoadCallback(drawChart);

				function drawChart() {
			    	let graph_format = 'percent';
			    	let graph_title = div_take+' Odds over Time';
			    	let line_title = 'Odds';
					let data_arr = odds.all_odds[0].participant_odds.map(odd => [/*convertDate(new Date(odd.date))*/ new Date(odd.date), odd.pct]);
					data_arr.unshift(['Date', line_title]);
					let data = google.visualization.arrayToDataTable(data_arr);
					let options = {
						title: graph_title,
						vAxis: {minValue: 0, maxValue: 1, format: graph_format},
						hAxis: {format: 'M/d/yy'},
						explorer: {maxZoomOut: 1, keepInBounds: true, zoomDelta: 1.1}
						//height: 450,
						//width: 515,
					};

					var date_formatter = new google.visualization.DateFormat({ 
    					pattern: "MMM d, yyyy"
					}); 
					date_formatter.format(data, 0);

			    	let chart = new google.visualization.LineChart(document.getElementById('statProgressionChart'));

			    	chart.draw(data, options);
			    	
				}
			});

			fetch('/api/odds/historical/current/'+take)
			.then(res => res.json())
			.then(odds => {
				google.charts.load("current", {packages:['corechart']});
				google.charts.setOnLoadCallback(drawDonutChart);

				function drawDonutChart() {
					let dates = odds.map(odd => odd.current_odds.date).sort();
	    			let current_date = dates[dates.length-1];
					let data_arr = odds.map(odd => [odd.participant, (odd.current_odds.date==current_date) ? odd.current_odds.pct:0]);
					//console.log(data_arr);
					data_arr.unshift(['Team', 'Odd']);
					let data = google.visualization.arrayToDataTable(data_arr);
					let options = {
						title: div_take+' Current Odds',
						//vAxis: {minValue: 0, maxValue: 15},
						//height: 450,
						//width: 515,
						pieHole: .4,
						//isStacked: true
					};

					var chart = new google.visualization.PieChart(document.getElementById("statBarChart"));
					chart.draw(data, options);
				}

			});
		}

	</script>

</body>
</html>